% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Param.R
\name{estimateParam}
\alias{estimateParam}
\title{Estimate simulation parameters}
\usage{
estimateParam(countData,
batchData = NULL,
spikeData = NULL,
spikeInfo = NULL,
Lengths = NULL,
MeanFragLengths = NULL,
Distribution = c('NB', 'ZINB'),
RNAseq = c('bulk', 'singlecell'),
Normalisation = c('TMM', 'MR', 'PosCounts', 'UQ', 'scran', 'Linnorm',
                  'SCnorm', 'RUV', 'Census', 'depth', 'none'),
sigma = 1.96,
NCores = NULL,
verbose=TRUE)
}
\arguments{
\item{countData}{is a count \code{matrix}.
Rows correspond to genes, columns to samples.
The gene names should be given as rownames without "_" in the names. The samples names should be given as colnames.}

\item{batchData}{is a \code{data.frame} for batch annotation.
Rows correspond to samples. The first column should contain the batches, e.g. 'a', 'b', 'c', etc.}

\item{spikeData}{is a count \code{matrix}.
Rows correspond to spike-ins, columns to samples.
The order of columns should be the same as in the \code{countData}.}

\item{spikeInfo}{is a molecule count \code{matrix} of spike-ins.
Rows correspond to spike-ins. The order of rows should be the same as in the \code{spikeData}.
The column names should be 'SpikeID' and 'SpikeInput' for molecule counts of spike-ins.}

\item{Lengths}{is a numeric vector of transcript lengths with the same length and order as the rows in countData.
This variable is only used for internal TPM calculations if Census normalization is specified.}

\item{MeanFragLengths}{is a numeric vector of mean fragment lengths with the same length as columns in countData.
This variable is only used for internal TPM calculations if Census normalization is specified.}

\item{Distribution}{is a character value: "NB" for negative binomial or "ZINB" for zero-inflated negative binomial distribution fitting.}

\item{RNAseq}{is a character value: "bulk" or "singlecell".}

\item{Normalisation}{is a character value: 'TMM', 'MR', 'PosCounts', 'UQ', 'scran', 'Linnorm',
'SCnorm', 'RUV', 'Census', 'depth', 'none'.
For more information, please consult the details section.}

\item{sigma}{The variability band width for mean-dispersion loess fit defining the prediction interval for read count simulation. Default is 1.96, i.e. 95\% interval. For more information see \code{\link[msir]{loess.sd}}.}

\item{NCores}{The number of cores for normalisation method SCnorm and Census.
The default \code{NULL} means 1 core.}

\item{verbose}{Logical value to indicate whether to print function information. Default is \code{TRUE}.}
}
\value{
List object with the following entries
\item{seqDepth}{Library size, i.e. total number of reads per library}
\item{means}{Mean normalized read counts per gene.}
\item{dispersion}{Dispersion estimate per gene.}
\item{common.dispersion}{The common dispersion estimate over all genes.}
\item{size}{Size parameter of the negative binomial distribution, i.e. 1/dispersion.}
\item{p0}{Probability that the count will be zero per gene.}
\item{meansizefit}{A loess fit relating log2 mean to log2 size for use in simulating new data (\code{\link[msir]{loess.sd}}).}
\item{meandispfit}{A fit relating log2 mean to log2 dispersion used for visualizing mean-variance dependency (\code{\link[msir]{loess.sd}}).}
\item{p0.cut}{The knee point of meanp0fit. Log2 mean values above that value have virtually no dropouts.}
\item{grand.dropout}{The percentage of empty entries in the count matrix.}
\item{sf}{The estimated library size factor per sample.}
\item{totalS,totalG}{Number of samples and genes provided.}
\item{estS,estG}{Number of samples and genes for which parameters can be estimated.}
\item{RNAseq}{The type of RNAseq: bulk or single cell.}
\item{normFramework}{The normalisation method used to calculate normalized parameters and library size factors.}
\item{sigma}{The width of the variability band.}
}
\description{
This function estimates and returns parameters needed for power simulations assuming a negative binomial read count distribution.
}
\details{
Normalisation methods
\describe{
\item{TMM, UQ}{employ the edgeR style normalization of weighted trimmed mean of M-values and upperquartile
as implemented in \code{\link[edgeR]{calcNormFactors}}, respectively.}
\item{MR, PosCounts}{employ the DESeq2 style normalization of median ratio method and a modified geometric mean method
as implemented in \code{\link[DESeq2]{estimateSizeFactors}}, respectively.}
\item{scran, SCnorm}{apply the deconvolution and quantile regression normalization methods developed for sparse RNA-seq data
as implemented in \code{\link[scran]{computeSumFactors}} and \code{\link[SCnorm]{SCnorm}}, respectively. Spike-ins can also be supplied for both methods via \code{spikeData}. Note, however that this means for scran that the normalisation as implemented in \code{\link[scran]{computeSpikeFactors}} is also applied to genes (\code{general.use=TRUE}).}
\item{Linnorm}{apply the normalization method for sparse RNA-seq data
as implemented in \code{\link[Linnorm]{Linnorm.Norm}}.
For \code{Linnorm}, the user can also supply \code{spikeData}.}
\item{RUV}{removes unwanted variation. There are two approaches implemented:
(1) utilizing negative control genes, i.e. spike-ins stored in \code{spikeData} (\code{\link[RUVSeq]{RUVg}}).
(2) utilizing replicate samples, i.e. samples for which the covariates of interest are considered constant.
This annotation is stored in \code{batchData} (\code{\link[RUVSeq]{RUVs}}).}
\item{Census}{converts relative measures of TPM/FPKM values into mRNAs per cell (RPC) without the need of spike-in standards.
Census at least needs \code{Lengths} for single-end data and preferably \code{MeanFragLengths} for paired-end data.
Do not use this algorithm for UMI data!}
\item{depth}{Sequencing depth normalisation.}
\item{none}{No normalisation is applied. This approach can be used for prenormalized expression estimates, e.g. cufflinks, RSEM or salmon.}
}
}
\examples{
\dontrun{
## using example data set
data(kolodziejczk_cnts)
kolodziejczk_estparam <- estimateParam(countData=kolodziejczk_cnts,
                          spikeData=NULL, spikeInfo = NULL,
                          Lengths=NULL, MeanFragLengths=NULL,
                          Distribution='ZINB',
                          RNAseq="singlecell",
                          Normalisation='scran',
                          NCores=NULL,
                          sigma=1.96)
## simulating single cell RNA-seq experiment
ngenes <- 10000
ncells <- 100
true.means <- 2^runif(ngenes, 3, 6)
true.dispersions <- 3 + 100/true.means
sf.values <- 2^rnorm(ncells, sd=0.5)
sf.means <- outer(true.means, sf.values, '*')
cnts <- matrix(rnbinom(ngenes*ncells,
                       mu=sf.means, size=1/true.dispersions),
               ncol=ncells)
## estimating negative binomial parameters
estparam <- estimateParam(countData=cnts,
                          spikeData=NULL, spikeInfo = NULL,
                          Lengths=NULL, MeanFragLengths=NULL,
                          Distribution='NB',
                          RNAseq="singlecell",
                          Normalisation='scran',
                          NCores=NULL,
                          sigma=1.96)
plotParam(estparam, annot=F)

## simulating bulk RNA-seq experiment
ngenes <- 10000
nsamples <- 10
true.means <- 2^rnorm(ngenes, mean=8, sd=2)
true.dispersions <- 3/true.means + 0.1
sf.values <- rnorm(nsamples, mean=1, sd=0.1)
sf.means <- outer(true.means, sf.values, '*')
cnts <- matrix(rnbinom(ngenes*nsamples,
                       mu=sf.means, size=1/true.dispersions),
               ncol=nsamples)
## estimating negative binomial parameters
estparam <- estimateParam(countData=cnts,
                          Distribution='NB', RNAseq="bulk",
                          Normalisation='MR', sigma=1.96)
plotParam(estparam, annot=F)
}
}
\author{
Beate Vieth
}
